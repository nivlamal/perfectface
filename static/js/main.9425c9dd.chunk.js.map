{"version":3,"sources":["redux/actions/index.js","presentation/CameraView.jsx","utils/getCameraStream.js","presentation/ProductRects.jsx","presentation/FaceCanvas.jsx","containers/FaceContainer.js","App.js","serviceWorker.js","redux/reducers/index.js","index.js"],"names":["HANDLE_WINDOW_RESIZE","SET_CAMERA_STATUS","getCameraStreamCallback","stream","player","document","getElementById","srcObject","play","getCameraStreamErrorCallback","error","alert","CameraView","props","width","height","windowHeight","windowWidth","videoPlayerStyle","transform","WebkitTransform","MozTransformStyle","console","log","isCameraStreamActive","successCallback","failureCallback","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","bind","api","video","getCameraStream","setCameraStatus","react_default","a","createElement","id","style","autoPlay","ProductRects","order","Object","objectSpread","x","y","border","fill","FaceCanvas","_this","this","window","onresize","handleWindowResize","innerWidth","innerHeight","rootStyle","textAlign","overflow","svgStyle","preserveAspectRatio","background","zIndex","viewBox","position","left","top","backgroundColor","presentation_CameraView","dx","dy","stdDeviation","presentation_ProductRects","React","Component","connect","state","dispatch","type","status","App","className","FaceContainer","Boolean","location","hostname","match","initialState","rootReducer","arguments","length","undefined","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9425c9dd.chunk.js","sourcesContent":["/** This file represents all the actions that can be performed **/\r\n/** by the redux store. It also specifies the inputs required  **/\r\n/** for each action. The actions themselves are not performed  **/\r\n/** here but at the reducers                                   **/\r\n\r\n// The strings that represent the action type\r\nexport const HANDLE_WINDOW_RESIZE = 'HANDLE_WINDOW_RESIZE';\r\nexport const EXAMPLE_ACTION1 = 'EXAMPLE_ACTION1';\r\nexport const EXAMPLE_ACTION2 = 'EXAMPLE_ACTION2';\r\nexport const GET_CAMERA = 'GET_CAMERA';\r\nexport const SET_CAMERA_STATUS = 'SET_CAMERA_STATUS';\r\n\r\n// Get camera device stream\r\nexport const getCamera = () => ({\r\n    type: GET_CAMERA\r\n});\r\n\r\n// Set status of camera stream (true means camera stream is already active)\r\nexport const setCameraStatus = (status) => ({\r\n    type: SET_CAMERA_STATUS,\r\n    status\r\n});\r\n\r\n// Get new window width and height\r\nexport const handleWindowResize = (width, height) => ({\r\n    type: HANDLE_WINDOW_RESIZE,\r\n    width,\r\n    height\r\n});\r\n\r\n// Action with no input required\r\nexport const exampleAction1 = () => ({\r\n    // It is represented by the string 'EXAMPLE_ACTION1'\r\n    type: EXAMPLE_ACTION1 \r\n});\r\n\r\n// Action with inputs required\r\nexport const exampleAction2 = (text, flag) => ({\r\n    // It is represented by the string 'EXAMPLE_ACTION2'\r\n    type: EXAMPLE_ACTION2,\r\n    text, // Requires 'text' and 'flag' parameters\r\n    flag\r\n});","/* The presentational component to display the camera view */\r\n\r\nimport React from 'react';\r\nimport getCameraStream from '../utils/getCameraStream';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CameraView = (props) => {\r\n    // Write the style in here to avoid having\r\n    // to use a CSS file    \r\n    var width = '100%'\r\n    var height = ''\r\n    if(props.windowHeight > props.windowWidth) {\r\n        width = '';\r\n        height = '100%'\r\n    }\r\n\r\n    const videoPlayerStyle = {\r\n        // The video will fill the entire container div\r\n        width: width,\r\n        height: height,\r\n        transform: 'rotateY(180deg)',\r\n        WebkitTransform: 'rotateY(180deg)', /* Safari and Chrome */        \r\n        MozTransformStyle: 'rotateY(180deg)',/* Firefox */\r\n    };\r\n\r\n    console.log(props);\r\n\r\n    // If camera not active yet\r\n    if(!props.isCameraStreamActive) {\r\n        // Try to get the camera stream\r\n        getCameraStream(getCameraStreamCallback, getCameraStreamErrorCallback);\r\n        // Set the camera status of the APP state to TRUE\r\n        props.setCameraStatus(true);\r\n    }    \r\n\r\n    return (\r\n        <video\r\n            id='camera-view'\r\n            style={videoPlayerStyle}\r\n            autoPlay\r\n        />\r\n    )\r\n}\r\n\r\n// Callback if getCameraStream is successful\r\nfunction getCameraStreamCallback(stream) {\r\n    // Find the videoPlayer element\r\n    var player = document.getElementById('camera-view');\r\n    // Set the videoPlayer element's video stream\r\n    player.srcObject = stream;\r\n    player.play();    \r\n}\r\n\r\n// Callback if getCameraStream is unsuccessful\r\nfunction getCameraStreamErrorCallback(error) {\r\n    // Popup alert with error message\r\n    alert('Error getting media stream ' + error);\r\n}\r\n\r\nexport default CameraView;\r\n\r\nCameraView.propTypes = {\r\n    windowWidth: PropTypes.number.isRequired,\r\n    windowHeight: PropTypes.number.isRequired,\r\n};","// Function to get the camera stream\r\n// of the client machine\r\nexport default function getCameraStream(successCallback, failureCallback) {\r\n    // Check if any media API is supported by the client\r\n    if (!navigator.mediaDevices.getUserMedia && !navigator.webkitGetUserMedia &&\r\n        !navigator.mozGetUserMedia && !navigator.msGetUserMedia) {\r\n            alert('User Media API not supported.'); // If none supported, give an alert\r\n            return;\r\n        }\r\n\r\n    // Set constraints parameter of 'getUserMedia'\r\n    const constraints = {\r\n        video: true\r\n    };\r\n\r\n    // Set the media API to the appropriate one base on the client\r\n    const api = navigator.getUserMedia || navigator.webkitGetUserMedia ||\r\n        navigator.mozGetUserMedia || navigator.msGetUserMedia;\r\n\r\n    return api.bind(navigator)(constraints, successCallback, failureCallback);\r\n};","/* The presentational component to display the products */\r\n\r\nimport React from 'react';\r\n\r\nconst ProductRects = (props) => {\r\n    // Write the style in here to avoid having\r\n    // to use a CSS file\r\n    const rectStyle = {\r\n      x: 0,\r\n      y: 0,\r\n      width: 50,\r\n      height: 50,\r\n      border: '1px solid blue',\r\n      fill: 'blue'\r\n    };\r\n\r\n    return(\r\n        <g style={{ order:10}}>\r\n            <rect style={{...rectStyle,}}/>\r\n        </g>\r\n    )\r\n}\r\n\r\nexport default ProductRects;","/* Main presentational component */\r\n\r\nimport React from 'react';\r\nimport CameraView from './CameraView';\r\nimport ProductRects from './ProductRects'\r\n// import PropTypes from 'prop-types';\r\n\r\n\r\nclass FaceCanvas extends React.Component {\r\n    componentDidMount() {\r\n        // Handle when screen size changes\r\n        window.onresize = () => {\r\n            this.props.handleWindowResize(window.innerWidth, window.innerHeight);        \r\n        };\r\n        window.onresize();\r\n    }\r\n    render() {\r\n        // Write the style in here to avoid having\r\n        // to use a CSS file\r\n        const rootStyle = {\r\n            textAlign: 'center', // ensure video is in the center\r\n            width: '100vw', // Rest of view dedicated to the products\r\n            height: this.props.windowHeight,\r\n            overflow: 'hidden',\r\n        }\r\n\r\n        const svgStyle = {\r\n            preserveAspectRatio: 'xMaxYMax',\r\n            width: this.props.windowWidth,\r\n            height: this.props.windowHeight,\r\n            background: 'thistle',\r\n            zIndex: 2,\r\n            // The viewbox of the svg should fill the entire screen\r\n            viewBox: [\r\n                0,\r\n                0,\r\n                this.props.windowWidth,\r\n                this.props.windowHeight,\r\n            ],\r\n            position: 'fixed',\r\n            left: '0px',\r\n            top: '0px',\r\n            // Background of SVG is transparent to allow user to see camera view\r\n            backgroundColor: 'transparent'\r\n        };\r\n\r\n        return (\r\n            <div style={rootStyle}>\r\n                {/* The component that shows what the camera is seeing */}\r\n                <CameraView {...this.props}/>\r\n                {/* The SVG overlays on top of the camera view with a transparent background */}\r\n                <svg id='face-canvas' style={{ ...svgStyle }}>\r\n                    <defs>\r\n                        <filter id=\"shadow\">\r\n                            <feDropShadow dx=\"1\" dy=\"1\" stdDeviation=\"2\" />\r\n                        </filter>\r\n                    </defs>\r\n\r\n                    <ProductRects />\r\n                </svg>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n// Proptypes to define required props\r\nFaceCanvas.propTypes = {\r\n};\r\n\r\nexport default FaceCanvas;","/** Example container **/\r\n/*\r\n    A container component is used to connect\r\n    a presentation component to the redux store.\r\n    It exists so that presentation components\r\n    codes can be focused on graphic design.\r\n*/\r\n\r\nimport { connect } from 'react-redux';\r\nimport { handleWindowResize, setCameraStatus } from '../redux/actions';\r\nimport FaceCanvas from '../presentation/FaceCanvas';\r\n\r\n// Maps redux state to Presentation1's props\r\n// since this example uses a combineReducer,\r\n// each specific reducer has their own state\r\nconst mapStateToProps = state => ({\r\n    windowWidth: state.windowWidth,\r\n    windowHeight: state.windowHeight,\r\n    isCameraStreamActive: state.isCameraStreamActive,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    handleWindowResize: (width, height) => dispatch(handleWindowResize(width, height)),\r\n    setCameraStatus: (status) => dispatch(setCameraStatus(status))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(FaceCanvas);","import React from 'react';\nimport FaceContainer from './containers/FaceContainer';\n\nclass App extends React.Component {\n  componentDidMount() {\n    // TODO: Handle screen resizing\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <FaceContainer/>\n      </div>\n    );\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/** Root reducer **/\r\n/*  \r\n    This app only requires one reducer\r\n    unless the complexity of the app increases.\r\n*/\r\n\r\n// Import action definition(s)\r\nimport { HANDLE_WINDOW_RESIZE } from '../actions';\r\nimport { SET_CAMERA_STATUS } from '../actions';\r\n\r\n// Declare the initial state of this reducer\r\n// The state of the reducer will be accessible\r\n// by all containers\r\nconst initialState = {\r\n    windowHeight: 0,\r\n    windowWidth: 0,\r\n    isCameraStreamActive: false,\r\n}\r\n\r\n// The actions that can be performed by the app\r\n// will be performed below\r\nfunction rootReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n        case HANDLE_WINDOW_RESIZE:\r\n            return {\r\n                ...state,\r\n                windowHeight: action.height,\r\n                windowWidth: action.width,\r\n            };\r\n        case SET_CAMERA_STATUS:\r\n            return {\r\n                ...state,\r\n                isCameraStreamActive: action.status,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './redux/reducers';\n\n// Create the redux store from the root reducer\n// The redux store keeps the entire state and\n// all functions of the app in a single place\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(\n    rootReducer, /* preloadedState, */\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n/* eslint-enable */\n\nReactDOM.render(\n    // Wrap a redux provider around the web app\n    <Provider store={store}>        \n        <App /> {/* The presentation component of the app*/}\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}